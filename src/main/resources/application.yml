server:
  port: 9005
  servlet:
    context-path: "/api/payment-service"

cp:
  multi-thread-configs:
    payment-link-event-hook:
      thread-pool-size: 10
      thread-timeout-ms: 5000
  razor-pay:
    key-id: ${RP_KEY_ID:sample-key-id}
    key-secret: ${RP_KEY_SECRET:sample-key-secret}
    enable-logging: false
    payment-link-expiry-minutes: 5
    call-back-url: ""
    notify-email: false
    notify-sms: false
    web-hook-secret: ${RP_WEB_HOOK_SECRET:sample-webhook-secret}

spring:
  datasource:
    url: ${POSTGRES_ORDER_PAYMENT_DB_URL:jdbc:postgresql://localhost:5432/cp_order_payment_db}
    username: ${POSTGRES_ORDER_PAYMENT_DB_USERNAME:cp_service}
    password: ${POSTGRES_ORDER_PAYMENT_DB_PASSWORD:=PM8cT?hO|5BljNJgMr9%+-7(j5.!IgZ}
    driver-class-name: "org.postgresql.Driver"
    hikari:
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: "cp-payment-service"
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        max:
          poll:
            interval:
              ms: 60000
            records: 1
    producer:
      batch-size: 10
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

logging:
  level:
    root: "ERROR"
    org.course_planner: "INFO"